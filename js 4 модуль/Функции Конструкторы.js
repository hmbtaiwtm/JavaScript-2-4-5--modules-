'use strict'

function User (name, id) { // такая функция стала конструктивной и с помощью её мы можем создавать
    this.name = name;      // новых пользователей
    this.id = id;
    this.human = true;
    this.hello = function() {
        console.log(`Hello ${this.name}`)
    }
}

User.prototype.exit = function() {
    console.log(`пользователь ${this.name} ушел`)
}



const ivan = new User('Ivan', 28)  // теперь внутри этой переменной у нас будет находиться не функция а объект, потомучто функция наша стала конструкотором  и теперь когда она вызываеться при помощи ключевого слова new она создает новый объект с теми свойствами которые мы в неё записали, и раз это конструктор мы можем создать ещё один объект который будет отличаться
const alex = new User('Alex', 20) 

ivan.hello();
alex.hello

console.log(ivan)
console.log(alex) 

// кроме свойст мы можем записать и методы

// !Висновок

// конструкторы нам необходимы для создания новых однотипных объектов в практике это может быть новый пользователь сайта, товары в магазине, ролики на ютубе и тд. причем даже компоненты сайта будут создаваться таким образом  к примеру у нас несколько слайдов на одной и тойже странице но они разные в одном 5 слайда в другом 10 один будет использовать автопереключение другой не использовать 

// это все выглядит из нутри js но есть также классы которые очень удобны и более все гладко устроено и если вдруг спросят то классы были созданы после а не раньше для приукрашение такого кода 