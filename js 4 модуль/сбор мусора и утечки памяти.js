// Сборщик мусора, ссылка на документацию: https://learn.javascript.ru/garbage-collection


// Сборщик мусора «помечает» (запоминает) все корневые объекты.
// Затем он идёт по ним и «помечает» все ссылки из них.
// Затем он идёт по отмеченным объектам и отмечает их ссылки. Все посещённые объекты запоминаются, чтобы в будущем не посещать один и тот же объект дважды.
// …И так далее, пока не будут посещены все достижимые (из корней) ссылки.
// Все непомеченные объекты удаляются.

// Главное что нужно знать это 
// Сборка мусора выполняется автоматически. Мы не можем ускорить или предотвратить её.
// Объекты сохраняются в памяти, пока они достижимы.
// Если на объект есть ссылка – вовсе не факт, что он является достижимым (из корня): набор взаимосвязанных объектов может стать недоступен в целом, как мы видели в примере выше.


// То что сборщик мусора не может удалить 
function func() {
    smth = 'hi'  // мы создали лишнею глобальную переменную и ткая переменная не может быть удалена
}                // зборщиком муссора

// 2-й случай это забытый кем-то таймер, проблема в том что они хранят ссылки наа то с чем мы должныы рботать
Пример

const someRes = getdata();
const node = document.querySelector('.class'); // если мы удалим сейчас этот елемент то ссылка то он останеться в памяти так как ссылка на него все ещё существует  у setInterval соответсвено это уже утечка памяти

setInterval(function() { 
    if (node) {
        node.innerHTML = someRes
    }
}, 1000);

3-е // это обработчики событий на не существующие елементы, бывает такая ситуация что елемент удален а обработчик событий нет и в нем же остается ссылка на елемент но его нет, то же самое как пример выше

4-й // замыкание
Пример

function test() {
    const test1 = [];
    return function test3() {
        test1.push('hi');
        console.log('hi')
    };
};

const SayHello = test() // в нашу переменную за счет return сохраняеться функция test3 и сохраняеться ссыылка на что то нежелательное test1 хотя функция test отработала

5-е // ссылки на дом-Елементы

// часто мы сохраняем ссылки на  елементы в переменных джава скрипта в это же время они существуют и в структури Дом тоесть представление нашей верстки в виде объекта и когда мы удаляем объекты из дом дерева то ссылка на него может оставаться в переменной джс
Пример 

function createElem() {
    const div = document.createElement('div');
    div.id = 'test'
    return div
};

const testDiv = createElem();

document.body.append(testDiv);

function deletElement () {
    document.body.removeChild(document.getElementById('test'));
}

deletElement();

// но хоть и был елемент удален но был удалет только из Дом дерева а в js  осталься в переменной и способ что бы это исправить достаточно  document.body.append(testDiv); поместить в функцию createElem, убрать return и переменную testDiv и тогда наша функция просто выполниться содаст елемент даст ему id и очиститься не возращая никаких данных.