let i = 5,   // мы можем передавать значения с одной переменной в другую
    b = i;   // якобы делать копию

b = b + 5;

const obj = {
    a: 1,
    b: 2
};

const copy = obj // Ссылка

copy.a = 10

// опять таки мы можем создавать копию нашего объекта и не только и потом менять значение копии и этим
// новые значение также будут отражаться на оригинале

// но как это работает, наш объект пиредает не копию новой переменной а саму сыылку
// по этому при изменение у нас  влияет на оригинал

function copy(mainObj){
    let objcopy = {};

    let key
    for(key in mainObj){
        objcopy[key] = mainObj[key];
    }
    return objcopy;
}

const number = {
    a: 2,
    b: 5,
    c:{
        x: 7,
        y: 4
    }
}

const newNumbers =  copy(number)

const add = {
    a: 7,
    b: 4
}

console.log(Object.assign(number, add)) // соеденяет два объекта в один ни как  не имеет значение к оригиналу


                        // Масивы копии
const oldarr = ['a','b','c'];
const newArray = oldarr.slice(); // копирует старый массив

// есть еще  один способ 

const video = ['Youtube', 'vimeo', 'rutube'],
      blogs = ['wordpress', 'livejournal', 'blogger'],
      internet =  [...video, ...blogs, 'vk', 'facebook'] // способ спред
// такой способ просто бъеденяет все массивы которые мы указываем, для этого нужно ставить ...

function log(a,b,c){
    console.log(a);
    console.log(b,)
    console.log(c)
}

const num = [2, 5 , 7]

log(...num)  // вот еще наглядный премер того как работает этот способ, придставим что нам прийдуй
// какието данные в виде сассива  и нам нужно их вывести, вообщем этот массив разложиться на 3  отдельных элемента
// и функция запуститься с 3 отдельными сущнастями


