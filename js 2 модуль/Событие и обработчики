// самое первое нужно назначить обработчика событий а после уже писать события
// оброботчик это функция  котороя срабатывает как только событие  произошло
// НАПРИМЕР ЕСЛИ ПОЛЬЗОВАТЕЛЬ НАЖИМАЕТ МЫШКОЙ НА ОТКРЫТЬ МЕНЮ И ТД. ТО У НАС СРАБАТЫВАЕТ ФУНКЦИЯ
// КОТОРАЯ ОТКРЫВАЕТ ЭТО САМОЕ МЕНЮ если пользователь нажимает отправить данные то эти данные
// отпровляються на сервер и многое другое и КАЖДЫЙ РАЗ У НАС ОДНО И ТОЖЕ ШАБЛОН, СНАЧАЛО ПРОИСХОДИТ СОБЫТИЕ КЛИК ИЛИ
// ОТПРАВКА  И ТОЛЬКО ПОСЛЕ ЭТОГО СОБЫТИЯ У НАС ВЫПОЛЯНЕТЬСЯ НАША ФУНКЦИИЯ 
// У НАС В JS ВСЕГО ПОКА ЧТО 3 СПОСОБА КАК НАЗНАЧИТЬ ОБРАТЧИК И ПЕРВЫЙ
// 1) ИСПОЛЬЗОВАТЬ HTML ОТРИБУТ 
// МЫ ЗАХОДИМ В HTML И ТАМ НА НУЖНЫЙ НАМ ЕЛЕМЕНТ НАЗНАЧАЕМ ОБРАБОТЧИК 
// И ДЕЛАЕТСЬЯ ЭТО ТАК
onclick=alert('klick') // это может быть не только alert но суть не важна важно то что мы
// пишем onclick а дальше говорим что будет выполняться  но в реал проектах такой код почти не используеться
// он подходит либо в тестовых проектх либо очень маленьких 

//2) способ уже в js это использовать дом дерево 

const btn = document.querySelector('button'); // сначал получаем доступ к нашему елементу с которым будем
// работать

btn.onclick = function(){
    alert('click')
};

btn.onclick = function(){
    alert('second click')
}
// берем наш обект и делаем тоже самое что с первым пишем onclick а дальше уже функцию которая будет что то выполянть
// но такой метод тоже таки не используеться  по скольку может возникуть проблема при его использование
// проблема в том что если код обширный у нас и мы используем такой способ несколько раз то возникает проблем а
// что если у нас таких будет 3 4 или больше илиь 2 то предыдущие прсото исщезнут будет работать самый последний такой 
// метод, по этому он не крутой и далек от реальности,  ещ проблема в том что елси мы назначем такой способ и в будущем
// захотим удалить его то увы уже не сможем 

btn.addEventListener('click', ()=>{
    alert('click')
});

btn.addEventListener('click', ()=>{
    alert('click')
});
// опять таки пишеться наш елемент с которым будем работать дальше метод addEventListener и в скобках название действия
// а дальше после запитой колбек функция и кнутри пишем наши действие, У ТАКГО СПОСОБА ЕСТЬ БОЛЬШОЙ ПЛЮС
// ЕГО МОЖНО ИСПОЛЬЗОВТАЬ ВООТЛИЧИЕ ОТ ПРИДЕДУЩЕГО НЕСКОЛЬКО РАЗ

// СОБЫТИЕ В JS ВЫПОЛНЯЮТЬСЯ  ПО ПОРЯДКЕ ОЧЕРЕДИ КАК ТОЛЬКО У НАС НОВОЕ СОБЫТИЕ ПОСТУПИЛО ОНО ДОБОВЛЯЕТЬСЯ В ОЧЕРЕДЬ
// НЕЗАВИСИМО ОТ ДРУГИХ СОБЫТИЙ 

// ТАКЖЕ МОЖНО ИСПОЛЬЗОВАТЬ НЕ ТОЛЬКО КЛИК НО И НАПРИМЕР
btn.addEventListener('mouseenter', ()=>{
    console.log('hover')
});
// КАЖДЫЙ РАЗ ПРИ ПРИ НАВЕДЕНИЕ НА КНОПКУ У НАС В КОНСОЛЬ БУДЕТ ВЫВОДИТЬСЯ НАШ УКАЗАНЫЙ ТЕКСТ 
// ВОТ ТАКОЕ СОБЫТИЕ mouseenter - ПРИ НАВЕДЕНИЕ БУДЕТ ВЫПОЛНЯТЬ ДЕЙСТВИЕ

// ПО МИМО ЭТОГО НАМ ИНОГДА НАМ НЕОБХОДИМО ПОЛУЧАТЬ ДАННЫЕ О КАКОМТО ЕЛЕМЕНТЕ  С КОТОРЫМ МЫ ВЗАЕМОДЕЙСТВУЕМ 
// НАПРИМЕР ЧТО ЗА СОБЫТИЕ СЕЙЧАС ПРОИЗОШЛО  ИЛИ ЧТО ЗА ЕЛЕМЕНТ ИСПОЛЬЗУЕТЬСЯ ИЛИ ВОЗМОЖНО КООРДИНАТЫ ЭТОГО ЕЛЕМЕНТА
// И ТД.
// ДЛЯ ЭТОГО У НАС ЕСТЬ СПЕЦЫАЛЬНЫЙ ОБЪЕКТ  КОТОРЫЙ НАЗЫВАЕТЬСЯ event но важное то что этой обект события передаеться
// как оргумент и называть можно как хочетьс но обычно называют event или просто  e и он всегда должен быть первым
btn.addEventListener('mouseenter', (event)=>{
    console.log(event)
    console.log('hover')
});
// и в консоль мы получем список всех характеристик нашего елемента с которым мы работаем его велечину размер
// где он находиться в html его класс и тд. ну и можно сделать проще 
btn.addEventListener('mouseenter', (event)=>{
    console.log(event.target)
    console.log('hover')
});
// поставить точку и название характеристики которая  нам надо,
// И ТАК event ПИШЕТЬСЯ ВНУТРИ КАК ОРГУМЕНТ И ЕГО МОЖНО НАЗЫВАТЬ ПО РАЗНОМУ И ОН ВСЕГДА ДОЛЖЕН БЫТЬ ВПЕРЕДИ ДРУГИХ
// ОРГУМЕНТОВ 
// И ПЕРЕД НАМИ ЕСТЬ МНОГО ВОЗМОЖНОСТЕЙ НАПРИМЕР УЖАЛИТЬ НАШ ЕЛЕМЕНТ

btn.addEventListener('mouseenter', (event)=>{
    console.log(event.target)
    event.target.remove()
});
// при наведени мы просто удалим наш елемент
// И ТАК МОЖНО НЕ ТОЛКЬО УДАЛЯТ НО И ИЗМЕНТЬЯ РАЗМЕР И ТД при наведени или действием с елементом

// КАК МЫ ГОВОРИЛ ИНОГДА НАМ НУЖНО ЗАВЕРШАТЬ ИЛИ УДАЛЯТЬ НАШИ ОБРАБОТЧИКИ С ЕЛЕМЕНТАМИ ЧТО БЫ ОНИ БОЛЬШЕ
// НЕ РАБОТАИЛ И ЭТО МОЖНО СДЕЛАТЬ ТАК НО ТОЛКЬО С ЭТИМ МЕТОД СОВРЕМЕННЫМ НА СТРАЫХ НЕРАБОТАЕТ КАК МЫ ГОВОРИЛИ

let i = 0

const deletElement = (e) =>{ 
    console.log(e.target)
    i++
    if (i == 1){
        btn.removeEventListener('mouseenter',deletElement)// 1)
    }
};

btn.addEventListener('mouseenter',deletElement)
btn.removeEventListener('mouseenter',deletElement)
// МЫ СОЗДАЕМ НОВУЮ ПЕРЕМЕННУЮ ГДЕ У НАС БУДЕТ ЛЕЖАТЬ ФУНКЦИЯ КОТОРАЯ БУДЕТ ДЕЙСТВОАТЬ НА НАШЕ ЕЛМЕНТ
// И ВНУТРИ УКАЗЕМ ДЕЙСТВИЯ
// НАША ФУНКЦИ БДУЕТ ВЫПОЛНЯТСЬЯ ТОЛЬКО ТОГДА КОГДА ВОТ ЭТО ДЕЙСТВИЕ СРАБОАТЕТ
btn.addEventListener('mouseenter', deletElement) // ТОЕТСЬ ПРИ КЛИКЕ
// ДАЛЬШЕ ПИШЕМ ЕЩЕ ОДИН МЕТОД btn.removeEventListener('mouseenter',deletElement) КОРЫЙ БУДЕ УДАЛТЬ НАШ ЕЛЕМЕНТ

// вот такой конструкцией 1 мы говорим что если наше переменная бдет ровна 1 то мы просто удалим наш елемент
// ну в данном случае когда мы кликаем у нас сробатывает i++ и доходит до 1 и выполнятьсч услови
// и наш обработчик прекращает работу

// сплытие обработчиков это - КОГДА У НАС ЕСТЬ 2 ЕЛЕМЕНТА ОДНИ ИЗ НИХ ЯВЛЯЕТЬСЯ РОДИТЕЛЕМ ДРУГОГО 
// НО ПРИ ЭТОМ НА НИХ НАЗНАЧЕНЫ  ОПРЕДЕЛЕННЫЕ ОБРАБОТЧИКИ СОБЫТИЯ КОТОРЫЕ ОБРАБАТЫВАЮТ ОДНИ И ТЕЖИ ДЕЙСТВИЕ  
// НАПРИМЕР В ДАННОМ СЛУЧАЕ ЭТО КЛИК ТО ПРИ КЛИКЕ У НАС ПРЕВЫЙ СРАБОТАЕТ ТОТ КОТОРЫЙ ВЛОЖАНЫЙ А ПОТМО УЖЕ
// ДЕЙСТВИЕ ПОЙДЕТ ДО РОБИТЕЛЯ И СРАБОТАЕТ УЖЕ РОДИТЕЛЬ И ТАК ДАЛЬШЕ И ДАЛЬШЕ 

// ТАКЖЕ МЫ МОЖЕМ ОТМЕНЯТЬ СТАНДАРТНЫЕ ПОВЕДЕНИЕ БРАУЗЕРА НАПРИМЕР ВЫДЕЛЕНИЕ ИЛИ КОПИРОВАНИЕ И ТД.
// И ДЛЯ ЭТОГО ЕСТЬ 2 СОПСОБА 
// 1) ВЕРНУТЬ RETURN FALSE в самос конце но это давно устраешви  и неиспользуетьчя блогадоря 2 способу
// 2) способ 

link.addEventListener('click', function(e) {
    e.preventDefault();

    console.log(e.target)
});
// при нажати на сыллку у нас будет выводиться в консоль эта ссылка а не переходитья кудато 

btn.addEventListener('mouseenter', deletElement, {once: false}) // 3 аргумент это указует сколько раз выполнять
// в данно случает псоле 1 клика больше не будет рабаоть наша функциия 

