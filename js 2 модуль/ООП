"use strict"

//ООП -  прототипно-ориентированное наследование

const str = 'something'

const strObj = new String(str);

console.log(typeof(str))
console.log(typeof(strObj))

// при ввидение первой переменной нам вдаст тип даннх строка 
// а при второй переменной будет уже тип даннх объект
// так работает механизм в джава скрипт что при использование методов в строке
// строка будет становитьс на некоторое время объектом пока с ней работает метод
// а потмо возращает все обратно

const soilder = {
    health: 400,
    armor: 100
};

// const john = { 
//     health: 100
// }

john._proto_ = soilder;  // наш солдат Джон унаследует у его родителя способности кроме сдоровья потмоу что у него уже
                        // указано его здоровье, даже может унаследовать функции и тд.
console.log(john)       // но _proto_ старый метод и есть новые методы унаследие

Object.setPrototypeOf(john,soilder); // первый объект тот которому мы хотим назначить прототип а второй тот объект 
// прототип которого мы устанавливаем, работает также само как и выше сказаный, только этот но более новый и современный

// ну а в реальных проектах мы не создаем дополнительный объект с Джоном, мы сразу же создаем переменную 
// которую называем нужный нам именем например john, и присваиваем Object.create
const John = Object.create(soilder); // Object.create() работает также само



