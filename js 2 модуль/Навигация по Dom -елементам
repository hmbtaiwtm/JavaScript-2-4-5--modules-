// Есть задача взять определеный елемент и обратиться к его родителю или к слдущему елементу
// и у них уже поменять класс, очень частые задачи и уметь работать с ними надо и мы научимся

// начнем с самых главных елементов дом дерево

console.log(document.body); // обращение к телу сайта 
console.log(document.head); // к шапке сайта где мы можем даже вставить свой тег или подключить свойства и тд.
console.log(document.documentElement); // оброщение к главному тегу который содержит head и body

console.log(document.body.childNodes) // выводит  в консоль узлы которые являються детьми у body
// если вывести в консоль мы получем псевдомасив всех тех елементов которым body родитель,
// но псевдомасив содержит такой узел как text хотя у нас его нету, text - это елемент перенос строки на новую
// НО РАЗНИЦА МЕЖДУ DOM - ЕЛЕМЕНТАМИ И DOM - УЗЛАМИ, раница в том что дом елементы это елементы на странице 
// которые мы создали и их видно а дом узлы это такие елементы как text(перенос стоки), comment(коментарий) и тд.
// то что как бы не являеться елементом

// и так childNodes позволяет получить нам все елементы и узлы которые находяться в нашем родителе 
console.log(document.body.firstChild); - // получаем самый первый елемент нашего родителя
console.log(document.body.lastChild);  //  самый последний

// ТЕПЕРЬ КОМАНДА КОТОРАЯ ПОМОЖЕТ ПОЛУЧИТЬ РОДИТЕЛЯ СОСЕДЕЙ И ДЕТЕЙ 
console.log(document.querySelector('#current'))
// у нас есть кнопка с id = 'current' и у этой кнопки есть родитель с классом 'first' 
// и напремер у нас есть задача когда мы кликаем на кнопку то нам нужно получить родителя этой кнопки
// соответсвенно что бы получить родителя этой кнопки можно сделать так 

console.log(document.querySelector('#current').parentNode); // вот так в консоль полуем родителя этой кнопки
// допустим у нашего родителя (first) который содержит кнопку есть тоже родитель и что бы получить его нужно
// просто продублировать нашу команду вот так
console.log(document.querySelector('#current').parentNode.parentNode)

// И ТАК НО НЕ ВСЕГДА УДОБНО И ИНОГДА ХОЧЕТЬСЯ СОЗДАТЬ КАКОЙТО АТРИБУТ ЧТО БЫ ОРЕНТИРОВАТЬ ПО НЕМУ НА ЕЛЕМЕНТ
// БО ПО ID НЕ ВСЕГДА УДОБНО И ДЛЯ ЭТОГО ПРИДУМАЛИ data - атрибуты
// просто к нашему елементу в html нужно добавить data-(любое название по назначению) = 'здесь может быть любое значение'
// именно благодаря этим атрибутам будет очень удобно  орентироваться в наших скриптах

// но как получать наш атрибут, допустим имя нашего атрибута  current
console.log(document.querySelector('[data-current="3"]')) // в [] пишем имя нашего атрибута а потом его значение
// но теперь допустим у нас есть задача это получить следущий елемент после нашего елемента у которого атрибут
// и сделать это можно при помощи  сойства nextSiblings
console.log(document.querySelector('[data-current="3"]').nextSibling); // и да мы получем text в консоль потому что
// следущий у нас идет перенос строки по этому получаем в консоль text

console.log(document.querySelector('[data-current="3"]').previousSibling); // получить елемент перед нашим атрибутом
// и опять таки мы получем узел text - перенос строки

// но как же получить елемент а не узел для этого нужно уже писать elemetn
console.log(document.querySelector('[data-current="3"]').nextElementSibling) // теперь мы уже полчим елемент

console.log(document.querySelector('#current').parentElement); // здесь тоже самое но мы уже убеждены что получим
// елемент а не узел

// тоже самое что мы разбирали firstchild lastchild
console.log(document.body.firstElementChild);
console.log(document.body.lastElementChild);
// да для того что бы получить точно елемент нужно просто добавить element к нашему методу

// но в случае с
console.log(document.body.childNodes) // мы не можем получить только елементы 
// и не можем уже использовать element, по этому иногда эту проблему решают в ручную
// мы уже разберали метод forEach где мы можем перебрать все лементы но иногда но очень редко мы не можем использовать
// forEach и в таком случае мы уже должны использовать переберающую конструкцию которая называеться  for of

// например задача перебрать все елементы в бади и избавиться от текстовых нот тоесть узлом
// какрас в этом случае операторы brake и continue нам понадобяться 
for (let node of document.body.childNodes){
    if (node.nodeName == '#text'){
        continue;
    }

    console.log(node)
}
// если вывести всех детей body и посмотреть их свойства то можно заметить что у нашего text есть свойство nodeName
// то можно воспользоваться этим и сделать условие, что если наше nodeName будет == здесь мы пишем имя нашего text,
// тоесть его nodeName дальше при помощи оператора continue мы говрим
// что если наше условия будет правдой то просто  закончить цыкл и продолжить с новым значение    