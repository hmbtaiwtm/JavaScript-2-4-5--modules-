"use strict"

const options = {
    name: 'test',
    width: 1024,
    width: 1024,
    colors:{
        border: 'black',
        bg: 'red'
    }
}

options.name

delete options.name // опертор delete удаляет какоето указаное значение с объекта

for (let key in options){
    console.log(`Свойство ${key}, имеет значение ${options[key]}`)
}

// спомощью цыкла for in мы можем беребрать все кслючи и их значение внутри объекта не зная их
// для этого нужно создать цыкл потом создать переменую которая будет отвечать за ключи
// а потом интерполировать сначала ключ а потом значение ключа с помощью options[key]
// при вызови этой команды мыы увидем положительный результат кроме последнего,
//по скольку в нашем объекте есть другой объект js не может вывести его ключи и значение
// потому что все эти ключи и значение он выводит в строчном типе данных а, когда натыкаеться на объект
// внутри объкта то он не может привратить его в строчныый тип данных но есть конструкция что бы
// этого избежать
let counter = 0;

for (let key in options){
    if(typeof(options[key]) === `object`){
        for(let i in options[key]){
            console.log(`Свойство ${i}, имеет значение ${options[key][i]}`)
        }
    }else{
        console.log(`Свойство ${key}, имеет значение ${options[key]}`)
        counter ++
    }
}
// таким образом мы говорим сначала что елси у нас ключ внутри объекта будет объектом то мы создаем
// for in уже для этого объекта который внутри и интерполируем его с текстом, и тогда у нас
// выведеться каждый ключ со значением и каждый ключ со значением объекта который внутри объетка
// counter ++ спомощью этого оператора ++ мы можем создать пременую со значением 0
// и написать после цыкла что бы посчитать сколько у нас вышло ключей

for (let key of options){
    console.log(`Свойство ${key}, имеет значение ${options[key]}`)
}

// такая же конструкция но уже при помощи метода of но такой метод не работает с объектами

                    // Методы объектов

const opt = {
    name: 'test',
    width: 1024,
    width: 1024,
    colors:{
        border: 'black',
        bg: 'red'
    },
    makeTest: function(){
        console.log('Hello')
    }
};

options.makeTest()

console.log(Object.keys(opt).length); // это способ облегчит нам жизнь,нужен нам если мы хотим перечислить все
//ключи и их количество как это мы делали с for in,

//также мы можем создать свой метод внутри объекта как например мы создали function
// и что бы ее вызвать мыы должны как обычно обратиться к объекту и вызвать функцию

                            //деструктуризация

console.log(options['colors']['bg']) // такая структура что бы вытощить значение из объекта не очень класстная
// для этого деструктуризация, тоесть мы будем вытаскивать переменные в качестве отдельных структур или
// коробок которые мы будем выносить за объект

const {border, bg} = options.colors; // здесь мыы вытащили те ключи из объекта options внутри которого color
// который их содержит
// ну и что бы узнать какое значение у ключа border который стал у нас уже как переменная
// его достаточно просто вывести в консоль и мы увидем его значение
console.log(border);