'use strict'

//Любое регулярное выражение состоит из 2 частей (патерн и флаги)
// патерн - шаблон того что ищем в строке или что пытаемся удалить
// флаги разберем чуть позже
// в Js для создание регулярного вырожение мы можем пользоваться несколькома синтитаксами

// new RegExp('pattern', 'flags'); // не пользуються

// /pattern/f // короткий вариант

// шаблон проектирование регулярных веражений
// первый метод search

const ans = prompt('Введите ваше имя');

const reg = /n/; // - будет искать только букву n

console.log(ans.search(reg)) // метод search() - внутри переменная с патерном
// в консоли получем 1 - позиция на которой находится первая n
// если n не будет получим -1
// и большая N тоже не пройдет
// но что бы найти не в зависимости с больши ил маленьким регистром и не только 1 букву а все
// для этой цели у насесть флаги

// их 3
// i - находим не в зависимости от регистра
// g - найти несколько n
// m - многострочный режим

// const ans = /n/i - получим 1 даже если ведем с большим регитсром
// флаг g не содействует с search() - потомучто search ищет только самый первый результат а не каждый
// также можно комбинировать флаги igm и как хочешь img mgi и тд.

// const ans = /n/i

//метод match(reg) - уже полчем массив в котором паттерн который искали, его индекс, input который вводили
//благодаря match возможно такое прикинь
// но если использовать g то получим массив со всеми n

// метод replace()

const pass = prompt('пароль');

console.log(pass.replace(/./g, "*")) //в регулярных веражениях есть свои правила
// если внутри мы ставим точку это значит что мы берем абсолютно все елменты которые попадут в строку мы берем все символы пароля и заменим их на "*"

//метод test() - который возращает булин значение
const str = 'asdf'

const gar = /n/ig;

console.log(gar.test(str)) // если в str есть n он вернет true если нету false

// классы в решулярных выражения пишутсья через \
// \d - ищем цифры
// \w - слова все буквы
// \s - ищем пробелы

// наоборо 
// \D - не числа
// \W - не буквы


