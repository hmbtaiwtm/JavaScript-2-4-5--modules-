//когда ми пишем код он выполняется либо синхроно либо ансихронно, сихонно тот что сразу а ансинхронно тот что через время, как этой все рабоатает, просто, есть тмкое паонятие Call Stack Callback Queue и 
//Web Apis, сначала при запуске какого либо кода он попадает в call stack что бы выполнится а к примеру если это просто консоль лог то после выполнения он просто выополняется и пропадает, но если у нас есть обработчик события то он сначала выполняется в Call stack а после перехзодит в Web Apis - это место где он будет ждать дальнейших действий и да обработчик это синхроный код, так вот, он будет ждать что бы с ним выполнили какие либо действия, Callback Queue это же можно назвать как очередь, к примеру мы запустили код где у нас есть несколько строк кода ансихоного с синхроным и пока выполняется одна строчка другие строки кода ждут своей очереди а после переходят в Call Stack что бы выполнится

// впорос на собиседование

setTimeout(() => {
    console.log(1)
}, 0);

console.log(2)

// есть подвох, но в консоль мы получим 2, хоть и кажется что setTimeout выполнится сразу
// обяснение, во первых, setTimeout он всеровно проходит через ансихронную часть тоесть попадает в web Apis и сначала записывается и после этого идет Calckback, если эта операция ансихронная то сначал выполнется синхроный код
// и еще, если js видит там 0 то он автоматом подставляет 4 

// вывод, к примеру у нас обработчик события в котором setimeout с 1 секундой
// при клике сначала наш обработчик сработает в call state и попадет в Web Apis с setiemout который будет ждать 1 секунды что бы попасть в очередь в Callback Queue и после попадает снова в Call state что бы выполнется

