// дословно мы обещаем коду что если что то произошло то мы выполним какую либо функцию или действие(обещание)

// console.log('Запрос данных...') // - синхронный код выполшнится сразу 

// const req = new Promise(function (resolve, reject) { // промисы (имеют в себе функцию с 2 аргументами)
//     setTimeout(() => {                                
//         console.log('Подготовка данных') // - ансинхронный код - выполняется через время
//                                         // при этом коллбек функции соблюдатьт порядок выполнение этих действий
//         const product = {
//             name: 'Tv',
//             price: 2000
//         };

//         resolve(product)
//     }, 2000)
// })

// req.then((product) => { // - then для resolve - дословно когда все ок то будет выполнятся функции
//     return  new Promise((resolve, reject) => {
//         setTimeout(() => {
//             product.status = 'order';
//             resolve(product)
//         },2000)
//     });
// }).then(data => {
//     data.modify = true
//     return data
// }).then((data) => {
//     console.log(data)
// }).catch(() => { // уже для reject(если что то не ок), и ставится в конце
//     console.error('Произошел пиздец...') // если в коде что то не так, сработает reject и пропустит все then и вызовет catch
// }).finally(() => { // есть еще один  - finally - используется в самом конце он позволяет выполнить нам  действие в любом исходе промисе тоесть действие которые должны проиpводится всегда 
//     console.log('finylly')
// }) // файнали это участко где мы очищаем форму от старых данных здесь не гланое форма успешно отправлена или нет нам форму нужно всерогно очистить для этого и можем использовать блок кода файнали

// Методы Промисов All и Rase

const test = time => {
    return new Promise(resolve  => {
        setTimeout(() => resolve(), time) 
    })
};

// test(1000).then(() => console.log('1000ms'));
// test(2000).then(() => console.log('2000ms')); 

Promise.all([test(1000), test[2000]]).then(() => {
    console.log('all')
});// это две функции которые содержат промисы и которые вернут нам результат а потом обработать then это метод но зачем? дело в том что эта команда  Промис олл служит для того что бы мы точно  убедились что промисы уже выполнелись

Promise.race([test(1000), test[2000]]).then(() => {
    console.log('all')
} )
// Пропис рейс делает обратное(переводится как гонка) соответсвено в () задаем несколькоп промисов и мы должны определить какой из промисов выполнется первый и в таком случае мы выполняем определеную операцию дальше



// но чем отличаются Промисы от того кода снизу, все теже колбек функции которые выполняются одни за другим, но у Промисов есть свои особености, мы можем возращать промис и then по цыпочке


// setTimeout(() => {
//     console.log('Подготовка данных') // - ансинхронный код - выполняется через время
//                                     // при этом коллбек функции соблюдатьт порядок выполнение этих действий
//     const product = {
//         name: 'Tv',
//         price: 2000
//     };

//     setTimeout (() => {
//         product.status = 'order';
//         console.log(product)
//     }, 2000)
// }, 2000)



