"use strict"
//1) это удобно, пользователь нажал мы подгрузили
//2) ускорение реакции интерфейса, нет перезагруски всей страницы только часть контента
//3) уменьшение нагрузки на сервер

// минусы  
// 1) у пользователя должен быть вкл Js, пр плохом интернете может что то пойти не так
// но все это исправляемо уже

//что бы наша страница умела общатся с сервером нужны htp запроссы которые будем отправлять для этого нужна технология AJAX

const inputRub = document.querySelector('#rub'),
      inputUsd = document.querySelector('#usd');

inputRub.addEventListener('input', () => {
    const request = new XMLHttpRequest();
    request.open('Get', 'js/current.json', async, login, password);
    request.setRequestHeader('Content-type', 'application/json;  charset=uft-8');
    request.send();

    request.addEventListener('readystatechange', () => {
        if (request.readyState === 4 && request.status === 200) {
            console.log(request.response);
            const date = JSON.parse(request.response);
            inputUsd.value = (+inputRub.value / date.current.usd).toFixed(2) // - округляет;
        } else { // сервера могут ломаться по этому обязательно нужно else чтоб предпредить пользователя
             inputUsd.value = "Что-то пошло не так"
        }
    }) // в случае 'load' - проще, потому что срабатывает только 1 раз когда запрос готов  но в таком случае мы уберем readyState потому что как пример из жизни человек может вернуться из магазина  к примеру без продуктов или нехватило денег, по этому оставляем только reqesrt === 200 - что значит что все правельно
    readystatechange // отслежует статус готовнисть нашего запроса прямо сейчас
    load // - когда наш запрос полностью загрузился

    //status - статус сервера, была ошибка или все прошло успешно 
    //statusText - текстовое описания ответа от сервера
    // response - ответ от сервера
    // readyState -  текущие состояние нашего запроса
})

// open() - собирает настройки для запроса, первый аргумент method - для запроса к примеру get, 2 путь к серверу url, 3 - ансихроность, 4 - login логин, 5 - pasword пароль 

// Get - что мы хотим получить, 'js/current.json' - url запросы мы посылаем из html файла и формируем путь относительно html, остольные аргемнты пока не нужны

setRequestHeader() // - когда отправляем запрос нам нужно сказать  что именно мы отправляем на сервер что б сервер понимат точно что он принимает в себя JSON файл или изображения  и тд.
// - 1 у нас есть тип контента, 2 - какой тип и здесь сразу же можно указать кодировку которую используем  
send() // - уже отправляем  внутри если у нас в open cтоит не Get а post то ставим аргумент body а так в get body не будет, body - те данные которыые уходят на сервер

// кратко, пример код в реальной жизни: Мы отправили кого то в магазин и не знаем когда он вернется так же как не знаем когда получем ответ от сервера, дальше когда наш человек вернулся из магазина так же как и в коде мы начнем расматривать и что то делать с теми продуктами, точно также мы получим ответ от сревра и начнем с ним что то делать